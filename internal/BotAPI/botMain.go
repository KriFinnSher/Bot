package BotAPI

import (
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"strconv"
	"strings"
	"sync"
)

var (
	users = make(map[int64]*User) // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -> –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å
	ads   []Ad                    // –õ–µ–Ω—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
	mu    sync.Mutex              // –î–ª—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
)

type Review struct {
	Text   string
	Author string
	Rating uint8
}

type Product struct {
	Type      string
	Name      string
	Condition string
	Price     uint64
}

type Ad struct {
	OwnerID     int64
	OwnerName   string
	Description string
	Product     Product
	Location    string
}

type User struct {
	ID      int64
	Name    string
	Rating  float64
	Reviews []Review
	Ads     []Ad
}

func (u *User) CreateAd(description string, product Product, location string) {
	ad := Ad{OwnerID: u.ID, OwnerName: u.Name, Description: description, Product: product, Location: location}
	mu.Lock()
	ads = append(ads, ad)
	u.Ads = append(u.Ads, ad)
	mu.Unlock()
}

func (u *User) DeleteAd(name string) bool {
	mu.Lock()
	defer mu.Unlock()
	for i, ad := range u.Ads {
		if ad.Product.Name == name {
			u.Ads = append(u.Ads[:i], u.Ads[i+1:]...)
			for j, globalAd := range ads {
				if globalAd.Product.Name == name && globalAd.OwnerID == u.ID {
					ads = append(ads[:j], ads[j+1:]...)
					return true
				}
			}
		}
	}
	return false
}

func (u *User) LeaveReview(target *User, text string, rating uint8) {
	if rating > 5 {
		rating = 5
	}
	review := Review{Text: text, Author: u.Name, Rating: rating}
	mu.Lock()
	target.Reviews = append(target.Reviews, review)
	sum := 0.0
	for _, r := range target.Reviews {
		sum += float64(r.Rating)
	}
	target.Rating = sum / float64(len(target.Reviews))
	mu.Unlock()
}

func HandleStart(bot *tgbotapi.BotAPI, chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±–º–µ–Ω–∞ –≤–µ—â–∞–º–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/newad ‚Äì —Å–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n/myads ‚Äì –º–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n/deletead ‚Äì —É–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n/profile ‚Äì –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n/feed ‚Äì –ª–µ–Ω—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n/review ‚Äì –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
	bot.Send(msg)
}

func HandleProfile(bot *tgbotapi.BotAPI, chatID int64) {
	mu.Lock()
	user, exists := users[chatID]
	mu.Unlock()

	if !exists {
		msg := tgbotapi.NewMessage(chatID, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register.")
		bot.Send(msg)
		return
	}

	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("üë§ –ü—Ä–æ—Ñ–∏–ª—å:\n–ò–º—è: %s\n–†–µ–π—Ç–∏–Ω–≥: %.1f ‚≠ê\n–û–±—ä—è–≤–ª–µ–Ω–∏–π: %d",
		user.Name, user.Rating, len(user.Ads)))
	bot.Send(msg)
}

func GetFilteredAds(filterType, filterLocation string) []Ad {
	var filtered []Ad
	mu.Lock()
	defer mu.Unlock()
	for _, ad := range ads {
		if (filterType == "" || ad.Product.Type == filterType) && (filterLocation == "" || ad.Location == filterLocation) {
			filtered = append(filtered, ad)
		}
	}
	return filtered
}

var WaitingForNewAdInput = make(map[int64]bool)

func HandleNewAd(bot *tgbotapi.BotAPI, chatID int64) {
	WaitingForNewAdInput[chatID] = true
	msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ, –ö–∞—Ç–µ–≥–æ—Ä–∏—è, –°–æ—Å—Ç–æ—è–Ω–∏–µ, –¶–µ–Ω–∞, –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")
	bot.Send(msg)
}

func ProcessNewAd(bot *tgbotapi.BotAPI, chatID int64, input string) {
	parts := strings.Split(input, ",")
	if len(parts) < 5 {
		msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ù–∞–∑–≤–∞–Ω–∏–µ, –ö–∞—Ç–µ–≥–æ—Ä–∏—è, –°–æ—Å—Ç–æ—è–Ω–∏–µ, –¶–µ–Ω–∞, –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")
		bot.Send(msg)
		return
	}

	name := strings.TrimSpace(parts[0])
	category := strings.TrimSpace(parts[1])
	condition := strings.TrimSpace(parts[2])
	price, err := strconv.ParseUint(strings.TrimSpace(parts[3]), 10, 64)
	if err != nil {
		msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞! –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
		bot.Send(msg)
		return
	}
	location := strings.TrimSpace(parts[4])

	mu.Lock()
	user, exists := users[chatID]
	if !exists {
		user = &User{ID: chatID, Name: fmt.Sprintf("User_%d", chatID)}
		users[chatID] = user
	}
	mu.Unlock()

	product := Product{Type: category, Name: name, Condition: condition, Price: price}
	user.CreateAd(fmt.Sprintf("–û–±—ä—è–≤–ª–µ–Ω–∏–µ: %s –≤ %s", name, location), product, location)

	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf(
		"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\nüìå *%s* (%s)\nüí¨ %s\nüí∞ %d —Ä—É–±.\nüìç %s",
		name, category, condition, price, location))
	msg.ParseMode = "Markdown"
	bot.Send(msg)

	WaitingForNewAdInput[chatID] = false
}

func HandleMyAds(bot *tgbotapi.BotAPI, chatID int64) {
	mu.Lock()
	user, exists := users[chatID]
	mu.Unlock()

	if !exists || len(user.Ads) == 0 {
		msg := tgbotapi.NewMessage(chatID, "–£ –≤–∞—Å –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
		bot.Send(msg)
		return
	}

	var response strings.Builder
	response.WriteString("üì¢ –í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n")
	for _, ad := range user.Ads {
		response.WriteString(fmt.Sprintf("\nüìå *%s* (%s)\nüí¨ %s\nüí∞ %d —Ä—É–±.\nüìç %s\n",
			ad.Product.Name, ad.Product.Type, ad.Product.Condition, ad.Product.Price, ad.Location))
	}

	msg := tgbotapi.NewMessage(chatID, response.String())
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

var WaitingForDeleteAdInput = make(map[int64]bool)

func HandleDeleteAd(bot *tgbotapi.BotAPI, chatID int64) {
	mu.Lock()
	user, exists := users[chatID]
	mu.Unlock()

	if !exists || len(user.Ads) == 0 {
		msg := tgbotapi.NewMessage(chatID, "–£ –≤–∞—Å –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
		bot.Send(msg)
		return
	}

	var response strings.Builder
	response.WriteString("üì¢ –í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n")
	for _, ad := range user.Ads {
		response.WriteString(fmt.Sprintf("üîπ %s (%s)\n", ad.Product.Name, ad.Product.Type))
	}

	msg := tgbotapi.NewMessage(chatID, response.String()+"\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
	bot.Send(msg)

	WaitingForDeleteAdInput[chatID] = true
}

func ProcessDeleteAd(bot *tgbotapi.BotAPI, chatID int64, productName string) {
	mu.Lock()
	user, exists := users[chatID]
	mu.Unlock()

	if !exists {
		msg := tgbotapi.NewMessage(chatID, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
		bot.Send(msg)
		return
	}

	mu.Lock()
	defer mu.Unlock()

	for i, ad := range user.Ads {
		if strings.EqualFold(ad.Product.Name, productName) { // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä
			user.Ads = append(user.Ads[:i], user.Ads[i+1:]...) // –£–¥–∞–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
			msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ '%s' —É–¥–∞–ª–µ–Ω–æ.", productName))
			bot.Send(msg)
			WaitingForDeleteAdInput[chatID] = false
			return
		}
	}

	msg := tgbotapi.NewMessage(chatID, "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
	bot.Send(msg)
}

var WaitingForFeedInput = make(map[int64]bool)

func HandleFeed(bot *tgbotapi.BotAPI, chatID int64) {
	WaitingForFeedInput[chatID] = true
	msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –¢–∏–ø —Ç–æ–≤–∞—Ä–∞, –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π)")
	bot.Send(msg)
}

func ProcessFeedRequest(bot *tgbotapi.BotAPI, chatID int64, filters string) {
	parts := strings.Split(filters, ",")
	filterType, filterLocation := "", ""

	if len(parts) > 0 {
		filterType = strings.TrimSpace(parts[0])
	}
	if len(parts) > 1 {
		filterLocation = strings.TrimSpace(parts[1])
	}

	filteredAds := GetFilteredAds(filterType, filterLocation)
	if len(filteredAds) == 0 {
		msg := tgbotapi.NewMessage(chatID, "–û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
		bot.Send(msg)
		return
	}

	var response strings.Builder
	response.WriteString("üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n")
	for _, ad := range filteredAds {
		response.WriteString(fmt.Sprintf("\nüìå *%s* (%s)\nüìç %s\nüí∞ %d —Ä—É–±.\nüí¨ %s\n",
			ad.Product.Name, ad.Product.Type, ad.Location, ad.Product.Price, ad.Description))
	}

	msg := tgbotapi.NewMessage(chatID, response.String())
	msg.ParseMode = "Markdown"
	bot.Send(msg)

	WaitingForFeedInput[chatID] = false
}

var WaitingForReviewInput = make(map[int64]bool)

func HandleReview(bot *tgbotapi.BotAPI, chatID int64) {
	WaitingForReviewInput[chatID] = true
	msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–∑—ã–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ò–º—è, –¢–µ–∫—Å—Ç, –û—Ü–µ–Ω–∫–∞ (1-5)")
	bot.Send(msg)
}

func ProcessReview(bot *tgbotapi.BotAPI, chatID int64, input string) {
	parts := strings.Split(input, ",")
	if len(parts) < 3 {
		msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ò–º—è, –¢–µ–∫—Å—Ç, –û—Ü–µ–Ω–∫–∞ (1-5)")
		bot.Send(msg)
		return
	}

	//targetName := strings.TrimSpace(parts[0])
	reviewText := strings.TrimSpace(parts[1])
	rating, _ := strconv.Atoi(strings.TrimSpace(parts[2]))

	mu.Lock()
	defer mu.Unlock()

	targetUser, exists := users[chatID]
	if !exists {
		msg := tgbotapi.NewMessage(chatID, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
		bot.Send(msg)
		return
	}

	targetUser.LeaveReview(users[chatID], reviewText, uint8(rating))

	msg := tgbotapi.NewMessage(chatID, "‚úÖ –û—Ç–∑—ã–≤ –¥–æ–±–∞–≤–ª–µ–Ω!")
	bot.Send(msg)

	WaitingForReviewInput[chatID] = false
}

var WaitingForRegistration = make(map[int64]bool)

func HandleRegister(bot *tgbotapi.BotAPI, chatID int64) {
	WaitingForRegistration[chatID] = true
	msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
	bot.Send(msg)
}

func ProcessRegistration(bot *tgbotapi.BotAPI, chatID int64, name string) {
	mu.Lock()
	defer mu.Unlock()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç–æ –ª–∏ –∏–º—è
	for _, u := range users {
		if u.Name == name {
			msg := tgbotapi.NewMessage(chatID, "–≠—Ç–æ –∏–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.")
			bot.Send(msg)
			return
		}
	}

	// –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
	user, exists := users[chatID]
	if !exists {
		user = &User{ID: chatID, Name: name, Rating: 0}
		users[chatID] = user
	} else {
		user.Name = name
	}

	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ %s!", name))
	bot.Send(msg)

	WaitingForRegistration[chatID] = false
}
